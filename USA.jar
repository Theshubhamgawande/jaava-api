pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Clone the repository
                git 'https://github.com/Theshubhamgawande/jaava-api.git'
            }
        }

        pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Clone the repository
                git 'https://github.com/Theshubhamgawande/jaava-api.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build the Docker image
                script {
                    docker.build('javaa-api:latest')
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                // Run the Docker container
                script {
                    docker.image('javaa-api:latest').run('-d -p 8080:8080')
                }
            }
        }
    }

    post {
        always {
            // Actions that run regardless of build success or failure
            echo 'This will always run after the build.'
        }
        success {
            // Actions to run if the build succeeds
            echo 'Build succeeded!'
            // Example: Send a success notification (customize as needed)
            // mail to: 'you@example.com', subject: 'Build Succeeded', body: 'The Jenkins build was successful.'
        }
        failure {
            // Actions to run if the build fails
            echo 'Build failed!'
            // Example: Send a failure notification (customize as needed)
            // mail to: 'you@example.com', subject: 'Build Failed', body: 'The Jenkins build failed.'
        }
        cleanup {
            // Cleanup actions, like stopping the Docker container
            echo 'Cleaning up...'
            // Example: Stop the container (if it's still running)
            // sh 'docker stop $(docker ps -q --filter ancestor=javaa-api:latest)'
        }
    }
}
